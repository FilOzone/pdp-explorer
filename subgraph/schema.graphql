type ProofSet @entity(immutable: false) {
  id: Bytes! # setId
  setId: BigInt! # uint256
  listener: Bytes! # address
  owner: Provider! # address of the provider
  leafCount: BigInt! # uint256
  challengeRange: BigInt! # uint256
  isActive: Boolean!
  lastProvenEpoch: BigInt! # uint256
  nextChallengeEpoch: BigInt! # uint256
  totalRoots: BigInt! # uint256
  totalDataSize: BigInt! # uint256
  totalProofs: BigInt! # uint256
  totalProvedRoots: BigInt! # uint256
  totalFeePaid: BigInt! # uint256
  totalFaultedPeriods: BigInt! # uint256
  createdAt: BigInt!
  updatedAt: BigInt!
  blockNumber: BigInt!

  # Derived relationships
  roots: [Root!]! @derivedFrom(field: "proofSet")
  transactions: [Transaction!]! @derivedFrom(field: "proofSet")
  eventLogs: [EventLog!]! @derivedFrom(field: "proofSet")
  proofs: [Proof!]! @derivedFrom(field: "proofSet")
  proofFees: [ProofFee!]! @derivedFrom(field: "proofSet")
  faultRecords: [FaultRecord!]! @derivedFrom(field: "proofSet")
}

type Provider @entity(immutable: false) {
  id: Bytes! # address
  address: Bytes!
  proofSetIds: [BigInt!] # Keep for potential direct query, but derived is primary
  totalFaultedPeriods: BigInt!
  totalDataSize: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
  blockNumber: BigInt!

  # Derived relationship
  proofSets: [ProofSet!]! @derivedFrom(field: "owner")
}

type Root @entity(immutable: false) {
  id: Bytes! # Unique ID for Root (e.g., setId-rootId)
  setId: BigInt! # uint256 (Keep for filtering/direct access)
  rootId: BigInt! # uint256
  rawSize: BigInt! # uint256
  cid: Bytes!
  removed: Boolean!
  totalProofsSubmitted: BigInt! # uint256
  totalPeriodsFaulted: BigInt! # uint256
  lastProvenEpoch: BigInt! # uint256
  lastProvenAt: BigInt! # uint256
  lastFaultedEpoch: BigInt! # uint256
  lastFaultedAt: BigInt! # uint256
  createdAt: BigInt!
  updatedAt: BigInt!
  blockNumber: BigInt!

  # Relationship
  proofSet: ProofSet! # Link to ProofSet (stores ProofSet ID)
  # Derived relationships
  proofs: [Proof!]! @derivedFrom(field: "root")
  faultRecords: [FaultRecord!]! @derivedFrom(field: "roots") # For many-to-many derived
}

type EventLog @entity(immutable: true) {
  id: Bytes! # transactionHash-logIndex
  setId: BigInt! # uint256 (Keep for filtering/direct access)
  address: Bytes!
  name: String!
  data: String!
  logIndex: BigInt!
  transactionHash: Bytes! # Keep for linking
  createdAt: BigInt!
  blockNumber: BigInt!

  # Relationships
  proofSet: ProofSet! # Link to ProofSet (stores ProofSet ID)
  transaction: Transaction! # Link to Transaction (stores Transaction hash)
}

type Transaction @entity(immutable: true) {
  id: Bytes! # hash
  hash: Bytes!
  proofSetId: BigInt! # uint256 (Keep for filtering/direct access)
  height: BigInt! # uint256
  fromAddress: Bytes! # address
  toAddress: Bytes # address
  value: BigInt! # uint256
  method: String!
  status: Boolean!
  createdAt: BigInt!

  # Relationship
  proofSet: ProofSet! # Link to ProofSet (stores ProofSet ID)
  # Derived relationship
  eventLogs: [EventLog!]! @derivedFrom(field: "transaction")
}

type Proof @entity(immutable: true) {
  id: Bytes! # Unique ID (e.g., txHash-logIndex or setId-rootId-offset)
  setId: BigInt! # uint256 (Keep for filtering)
  rootId: BigInt! # uint256 (Keep for filtering)
  proofOffset: BigInt! # uint256
  provenAt: BigInt! # uint256
  blockNumber: BigInt!

  # Relationships
  proofSet: ProofSet! # Link to ProofSet (stores ProofSet ID)
  root: Root! # Link to Root (stores Root ID)
}

type ProofFee @entity(immutable: true) {
  id: Bytes! # Unique ID (e.g., txHash-logIndex or setId-timestamp)
  setId: BigInt! # uint256 (Keep for filtering)
  proofFee: BigInt! # uint256
  filUsdPrice: BigInt! # uint256
  filUsdPriceExponent: Int! # int32
  blockNumber: BigInt!
  createdAt: BigInt!

  # Relationship
  proofSet: ProofSet! # Link to ProofSet (stores ProofSet ID)
}

type FaultRecord @entity(immutable: true) {
  id: Bytes! # Unique ID (e.g., txHash-logIndex)
  proofSetId: BigInt! # uint256 (Keep for filtering)
  rootIds: [BigInt!]! # uint256[] (Keep for direct access)
  currentChallengeEpoch: BigInt! # uint256
  nextChallengeEpoch: BigInt! # uint256
  periodsFaulted: BigInt! # uint256
  deadline: BigInt! # uint256
  createdAt: BigInt!
  blockNumber: BigInt!

  # Relationships
  proofSet: ProofSet! # Link to ProofSet (stores ProofSet ID)
  roots: [Root!]! # Link to Roots (stores array of Root IDs)
}

type NetworkMetric @entity(immutable: false) {
  id: Bytes! # Unique ID (e.g., txHash-logIndex)
  totalProofSets: BigInt # uint256
  totalActiveProofSets: BigInt # uint256
  totalProviders: BigInt # uint256
  totalRoots: BigInt # uint256
  totalActiveRoots: BigInt # uint256
  totalDataSize: BigInt # uint256
  totalProofFeePaidInFil: BigInt # uint256
  totalProofs: BigInt # uint256
  totalProvedRoots: BigInt # uint256
  totalPeriodsFaulted: BigInt # uint256
  totalFaultedRoots: BigInt # uint256
}
